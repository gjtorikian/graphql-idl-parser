use ast::*;

grammar;

pub schema: Vec<TypeDefinition> =
    <TypeDefinition*> => <>;

TypeDefinition: TypeDefinition = {
    ScalarTypeDefinition,
    <d:Description*> "type" <n:Name> "{" <f:(<Field>)*> "}" => {
        TypeDefinition::ObjectType(GraphQLObject::new(check_desc(d), n, vec![], f))
    },
    <d:Description*> "type" <n:Name> "implements" <i:Comma<Name>> "{" <f:(<Field>)*> "}" => {
        TypeDefinition::ObjectType(GraphQLObject::new(check_desc(d), n, i, f))
    },
    <d:Description*> "enum" <n:Name> "{" <f:(<Value>)+> "}" => {
        TypeDefinition::EnumType(GraphQLEnum::new(check_desc(d), n, f))
    },
    <d:Description*> "interface" <n:Name> "{" <f:(<Field>)*> "}" => {
        TypeDefinition::InterfaceType(GraphQLInterface::new(check_desc(d), n, f))
    },
    <d:Description*> "union" <n:Name> "=" <t:Pipe<Name>> => {
        TypeDefinition::UnionType(GraphQLUnion::new(check_desc(d), n, t))
    },
    <d:Description*> "input" <n:Name> "{" <f:(<Field>)*> "}" => {
        TypeDefinition::InputObjectType(GraphQLInputObject::new(check_desc(d), n, f))
    },
};

ScalarTypeDefinition: TypeDefinition = {
    <d:Description*> "scalar" <n:Name> => {
        TypeDefinition::ScalarType(GraphQLScalar::new(check_desc(d), n))
    }
};

Field: GraphQLField = {
    <d:Description*> <n:FieldName> ":" <t:FieldType> <e:Deprecated?> <r:DeprecatedReason?> => {
        GraphQLField::new(check_desc(d), n, t, vec![], check_deprecated(e), r)
    },
    <d:Description*> <n:FieldName> "(" <a:(<Argument>)*> ")" ":" <t:FieldType> <e:Deprecated?> <r:DeprecatedReason?> => {
        GraphQLField::new(check_desc(d), n, t, a, check_deprecated(e), r)
    },
};

Value: GraphQLValue = {
    <d:Description*> <n:Name> => {
        GraphQLValue::new(check_desc(d), n)
    }
};

FieldType: FieldType = {
    <n:Name> <r:"!"?> => {
        FieldType {
            name: n,
            info: match r {
              None => TypeInfo::Nullable,
              Some(r) => TypeInfo::NonNullable,
            }
        }
    },
    "[" <n:Name> <r:"!"?> "]" <l:"!"?> => {
        FieldType {
            name: n,
            info: match r {
              None => match l {
                  None => TypeInfo::NullableListNullableElements,
                  Some(l) => TypeInfo::NonNullableListNullableElements
              },
              Some(r) => match l {
                  None => TypeInfo::NonNullableListNullableElements,
                  Some(l) => TypeInfo::NonNullableListNonNullableElements
              }
            }
        }
    }
};

Argument: GraphQLArgument = {
    <d:Description*> <n:FieldName> ":" <t:FieldType> => {
      GraphQLArgument::new(check_desc(d), n, t)
    }
};

Deprecated: bool = {
    "@deprecated" => true
};

DeprecatedReason: String = {
    "(reason: " <s:r#""[^"]*""#> ")" => {
      s[1..s.len()-1].to_string()
    }
};

Comma<T>: Vec<T> = {
    Comma1<T>? => <>.unwrap_or(vec![])
};

Comma1<T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Comma<T>> "," <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

Pipe<T>: Vec<T> = {
    Pipe1<T>? => <>.unwrap_or(vec![])
};

Pipe1<T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Pipe<T>> "|" <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

Name: String = r"[_A-Za-z][_0-9A-Za-z]*" => <>.to_owned();
FieldName: String = {
    r"[_A-Za-z][_0-9A-Za-z]*" => <>.to_owned(),
    "scalar"  => "scalar".to_owned(),
    "type"  => "type".to_owned(),
    "enum"  => "enum".to_owned(),
    "interface"  => "interface".to_owned(),
    "union"  => "union".to_owned(),
    "input"  => "input".to_owned(),
};

Description: String = <s:r"#\s*.+"> => s[1..s.len()].trim().to_owned();
