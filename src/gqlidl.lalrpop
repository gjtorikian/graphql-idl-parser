use ast::{Definition, Field, GraphQLType};

grammar;

pub schema: Vec<Definition> =
  <Definition*> => <>;

Definition: Definition = {
  <s:Description?> <g:GQLTypeWithFields> <n:Name> "{" <f:(<Field>)*> "}" => {
    Definition {
      description: match s {
        None => String::new(),
        Some(s) => {
            s
        }
      },
      typename: g,
      name: n,
      fields: f
    }
  },
  <s:Description?> <g:GQLTypeWithoutFields> <n:Name> => {
    Definition {
      description: match s {
        None => String::new(),
        Some(s) => {
            s
        }
      },
      typename: g,
      name: n,
      fields: Vec::new()
    }
  }
};

Fields: Vec<Field> = {
  <f:(<Field>)*> => f
};

Field: Field = {
  <s:Description?> <n:Name> ":" <t:Type> => {
    Field {
      description: match s {
        None => String::new(),
        Some(s) => {
            s
        }
      },
      name: n,
      typename: t
    }
  }
};

Type: String = {
  Name => <>.to_string()
};

GQLTypeWithFields: GraphQLType = {
  "type" => GraphQLType::ObjectType,
  "interface" => GraphQLType::InterfaceType,
  "input" => GraphQLType::InputObjectType
};

GQLTypeWithoutFields: GraphQLType = {
  "scalar" => GraphQLType::ScalarType,
  "union" => GraphQLType::UnionType
};

Name: String = r"[_A-Za-z][_0-9A-Za-z]*" => <>.to_string();
Description: String = <s:r"#\s*[^\n]*"> => s[1..s.len()].trim().to_string();
